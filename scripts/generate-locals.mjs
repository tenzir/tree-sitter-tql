#!/usr/bin/env node
import { existsSync, mkdirSync, writeFileSync } from "fs";
import { dirname, join, resolve } from "path";
import { fileURLToPath } from "url";
import { createRequire } from "module";

const __dirname = dirname(fileURLToPath(import.meta.url));
const repoRoot = resolve(__dirname, "..");
const grammarPath = join(repoRoot, "grammar.js");

const require = createRequire(import.meta.url);

function installDslStubs(target) {
  const stub =
    (name) =>
    (...args) => ({ type: name, args });
  target.seq = stub("seq");
  target.choice = stub("choice");
  target.repeat = stub("repeat");
  target.repeat1 = stub("repeat1");
  target.optional = stub("optional");
  target.alias = (value, name) => ({ type: "alias", value, name });
  target.field = (name, value) => ({ type: "field", name, value });
  const token = (arg) => ({ type: "token", arg });
  token.immediate = (arg) => ({ type: "token.immediate", arg });
  target.token = token;
  const prec = (precedence, rule) => ({ type: "prec", precedence, rule });
  prec.left = (precedence, rule) => ({ type: "prec.left", precedence, rule });
  prec.right = (precedence, rule) => ({ type: "prec.right", precedence, rule });
  prec.dynamic = (precedence, rule) => ({
    type: "prec.dynamic",
    precedence,
    rule,
  });
  target.prec = prec;
  target.grammar = (spec) => spec;
}

installDslStubs(global);

if (!existsSync(grammarPath)) {
  throw new Error(`Missing grammar source at ${grammarPath}`);
}

const { localConstants } = require("../grammar.js");
if (!localConstants) {
  throw new Error("grammar.js does not export localConstants");
}

const { SCOPES = [], DEFINITIONS = [] } = localConstants;

function buildLocals() {
  const lines = [
    ";; Auto-generated by tenzir/tree-sitter-tql/scripts/generate-locals.mjs. DO NOT EDIT.",
    "",
  ];

  for (const scope of new Set(SCOPES)) {
    lines.push(`(${scope}) @local.scope`, "");
  }

  for (const { node, field, capture = "@local.definition", type = "_" } of DEFINITIONS) {
    if (field) {
      lines.push(
        `(${node}\n  ${field}: (${type}) ${capture}\n)`,
        "",
      );
    } else {
      lines.push(`(${node} ${capture})`, "");
    }
  }

  while (lines.length > 0 && lines[lines.length - 1] === "") {
    lines.pop();
  }
  lines.push("");

  return lines.join("\n");
}

function main() {
  const args = process.argv.slice(2);
  const outputs = args.length > 0
    ? args
    : [
        "languages/tql/locals.scm",
        "queries/tql/locals.scm",
      ];

  const content = buildLocals();

  for (const outputArg of outputs) {
    const outputPath = resolve(repoRoot, outputArg);
    const outputDir = dirname(outputPath);
    if (!existsSync(outputDir)) {
      mkdirSync(outputDir, { recursive: true });
    }
    writeFileSync(outputPath, content, "utf8");
    console.log(`Wrote ${outputPath}`);
  }
}

main();
